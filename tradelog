#!/bin/bash

export POSIXLY_CORRECT=yes
export LC_NUMERIC=en_US.UTF-8

#---------------------------------------#
#                                       #
#   Projekt 1 - Analyza dat z burzy     #
#                                       #
#   Predmet IOS 2020/21                 #
#                                       #
#   Autor: Simon Vacek - xvacek10       #
#                                       #
#---------------------------------------#


#--------------------#
#                    #
#       FUNKCE       #
#                    #
#--------------------#


function printHelp ()
{
    echo "Usage: tradelog [-h|--help]"
    echo "       tradelog [FILTER] [COMMAND] [LOG [LOG2 [...]]"
}

# Na stdin vypise ze zadanych souboru ($1 - $2) vsechny radky odpovidajici filtrum ($3 - $5)
#   $1 soubory bezneho typu se vstupnimi daty (muze byt prazdny retezec)
#   $2 soubry *.gz - nezpracuje
#   $3 datum a cas nalezici prepinaci after
#   $4 datum a cas nalezici prepinaci before
#   $5 seznam tickeru
function getData ()
{
    local data=""
    data=`cat $1 |
        awk -F ";" -v after="$3" '{if($1 > after) {print}}' |
        awk -F ";" -v before="$4" '{if($1 < before) {print}}' |
        awk -F ";" -v ticker="$5" '$2 ~ ticker'`
    echo "$data"
}

# Na stdin vypise seznam tickeru
#   $1 vstupni radky tabulky
function listTick ()
{
    local tickers=`echo $1 | awk -F ";" '{print $2}' | sort`
    local result=""
    
    while read line; do
        if [[ "$result" != *"$line"* ]] ; then
            if [ -z "$result" ]; then
                result="$line"
            else
                result="$result"$'\n'"$line"
            fi
        fi
    done <<< "$tickers"

    echo "$result"
}

# Na stdin spocita celkovy vydelek
#   $1 vstupni radky tabulky
function profit ()
{
    local buy_records=`echo $1 | awk -F ";" '$3 == "buy" {print $4}'`
    local sell_records=`echo $1 | awk -F ";" '$3 == "sell" {print $4}'`

    local buy_sum=0
    local sell_sum=0

    while read line; do
        buy_sum=`awk -v sum=$buy_sum -v add=$line "BEGIN {print sum+add; exit}"`
    done <<< "$buy_records"

    while read line; do
        sell_sum=`awk -v sum=$sell_sum -v add=$line "BEGIN {print sum+add; exit}"`
    done <<< "$sell_records"

    echo "`awk -v buy=$buy_sum -v sell=$sell_sum 'BEGIN {printf "%.2f",  buy-sell; exit}'`"
}

# Na stdin vypise pro kazdy ticker hodnotu akutalne drzenych pozic
#   $1 vstupni radky tabulky
# TO BE DONE
function pos ()
{
    local tickers_records=$(listTick "$1")
    declare -a tickers
    declare -a sum

    while read tick; do
        tickers+=($tick)
    done <<< "$tickers_records"

    for tick in "${tickers[@]}" ; do
        sum+=(`
            echo "$1" |
            awk -F ";" -v tick=$tick '$2 == tick' |
            awk -F ";" '{if($3=="buy"){buy+=$6} else{sell+=$6} }; END {print buy-sell}'
        `)
    done

    i=0
    for sum_single in "${sum[@]}" ; do
        printf "%-10s: %s\n" "${tickers[i]}" $sum_single
        i=$((i+1))
    done
}

# Na stdin vypise pro kazdy ticker posledni znamou cenu akcie
#   $1 vstupni radky tabulky
function lastPrice ()
{
    local tickers_records=$(listTick "$1")
    declare -a tickers
    declare -a last_price
    local result=""

    while read tick; do
        tickers+=($tick)
    done <<< "$tickers_records"

    for tick in "${tickers[@]}" ; do
        last_price+=(`
            echo "$1" |
            awk -F ";" -v tick=$tick '$2 == tick' |
            awk -F ";" '{if(latest_date==""){latest_date=$1; price=$4}; if($1>latest_date){latest_date=$1; price=$4}}; END {print price}'
        `)
    done

    i=0
    for price in "${last_price[@]}" ; do
        if [ -z "$result" ] ; then
            result=$(printf "%-10s: %s" "${tickers[i]}" $price)
        else
            result="${result}\n$(printf "%-10s: %s" "${tickers[i]}" $price)"
        fi
        i=$((i+1))
    done
    echo -e "$result"
}

function histOrd ()
{
    echo ""
}

function graphPos ()
{
    echo ""
}



#-------------------#
#                   #   
#       MAIN        #
#                   #
#-------------------#


DATETIME='^[0-9]{4}\-[0-3][0-9]\-[0-9]{2} [0-2][0-9]\:[0-5][0-9]\:[0-5][0-9]$'
IFS="\n "

WIDTH=1000
BEFORE="9999-99-99 99:99:99"
AFTER="0000-00-00 00:00:00"
TICKER=""

declare -a other_args=""
num_other_args=0


#ziskani filtru z volani skriptu
#zbytek (prikazy  a logy) se presouva do other_args
while [ "$#" -gt 0 ]; do
    case "$1" in
        --help | -h)
            printHelp
            exit 0
        ;;

        -w)
            if [ -z "$2" ] ; then
                echo >&2 "Filter -w expects a parameter."
                exit 1
            fi
            if [[ $2 =~ ^[0-9]+$ ]] ; then
                WIDTH=$2
                shift
            else
                echo >&2 "Filter -w expects a natural number as a parameter."
                exit 1
            fi
        ;;

        -a)
            if [ -z "$2" ] ; then
                echo >&2 "Filter -a expects a parameter."
                exit 1
            fi
            if [[ $2 =~ $DATETIME  ]] ; then
                if [ -z "$AFTER" ] ; then
                    AFTER=$2
                else
                    if [[ "$2">"$AFTER" ]] ; then
                        AFTER="$2"
                    fi
                fi
                shift
            else
                echo >&2 "Filter -a expects a datetime formatted like: \"YYYY-MM-DD HH:MM:SS\""
                exit 1
            fi
        ;;

        -b)
            if [ -z "$2" ] ; then
                echo >&2 "Filter -a expects a parameter."
                exit 1
            fi
            if [[ $2 =~ $DATETIME  ]] ; then
                if [ -z "$BEFORE" ] ; then
                    BEFORE=$2
                else
                    if [[ "$2"<"$BEFORE" ]] ; then
                        BEFORE="$2"
                    fi
                fi
                shift
            else
                echo >&2 "Filter -b expects a datetime formatted like: \"YYYY-MM-DD HH:MM:SS\""
                exit 1
            fi
        ;;

        -t)
            if ! [[ $2 =~ (^[^ ;]+$) ]] ; then
                echo >&2 "Filter -t does not expect a ticker containing space \" \" nor semicolon \";\"."
                exit 1
            else
                if ! [ -z "$TICKER" ]; then
                    TICKER="${TICKER}|$2"
                else
                    TICKER=$2
                fi
                shift
            fi
        ;;

        *)
            other_args[$num_other_args]=$1
            num_other_args=$((num_other_args+1))
        ;;
    esac
    shift
done

#zpracovani prikazu a souboru

COMMAND=""
FILES=""
GZ_FILES=""

for i in "${other_args[@]}" ; do
    case "$i" in
        list-tick)
            if [ -z "$COMMAND" ] ; then
                COMMAND="list-tick"
            else
                echo >&2 "Only 1 command can be processed for each call of tradelog."
                exit 2
            fi
        ;;

        profit)
            if [ -z "$COMMAND" ] ; then
                COMMAND="profit"
            else
                echo >&2 "Only 1 command can be processed for each call of tradelog."
                exit 2
            fi
        ;;

        pos)
            if [ -z "$COMMAND" ] ; then
                COMMAND="pos"
            else
                echo >&2 "Only 1 command can be processed for each call of tradelog."
                exit 2
            fi
        ;;

        last-price)
            if [ -z "$COMMAND" ] ; then
                COMMAND="last-price"
            else
                echo >&2 "Only 1 command can be processed for each call of tradelog."
                exit 2
            fi
        ;;

        hist-ord)
            if [ -z "$COMMAND" ] ; then
                COMMAND="hist-ord"
            else
                echo >&2 "Only 1 command can be processed for each call of tradelog."
                exit 2
            fi
        ;;

        graph-pos)
            if [ -z "$COMMAND" ] ; then
                COMMAND="graph-pos"
            else
                echo >&2 "Only 1 command can be processed for each call of tradelog."
                exit 2
            fi
        ;;
        
        *)
            if [ -f $i ] && [ -r $i ] ; then
               if [ -z $FILES ] ; then
                    FILES=$i
                else
                    FILES="$FILES $i"
                fi
            else
                echo >&2 "An unknown argument was passed to tradelog: \"$i\""
                echo -e "\nFor more information use \"--help\" or \"-h\"."
                exit 3
            fi
        ;;
    esac
done

#volani funkce nad ziskanymi daty

DATA="$(getData "$FILES" "$GZ_FILES" "$AFTER" "$BEFORE" $TICKER)"
case $COMMAND in
    list-tick)
        echo "$(listTick "$DATA")"
    ;;

    profit)
        echo "$(profit "$DATA")"
    ;;

    pos)
        pos "$DATA"
    ;;

    last-price)
        echo "$(lastPrice "$DATA")"
    ;;

    hist-ord)
        histOrd "$DATA"
    ;;

    graph-pos)
        graphPos "$DATA"
    ;;

    *)
        echo "$DATA"
    ;;
esac

exit 0;
